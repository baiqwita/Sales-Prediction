library(shiny)
library(shinydashboard)
library(ggplot2)
library(markdown)
library(shinythemes)
library(rsconnect)
library(shinyalert)
library(plotly)
library(gridExtra)
library(DT)


# Load the data
data <- data.frame(
  x1 = c(150000,160000,170000,180000,190000,200000,210000,220000,230000,240000,250000,260000),
  x2 = c(8000,9500,10000,10500,11000,9000,11500,12000,12500,13000,14000,15000),
  x3 = c(5,4.5,4.8,4.6,5.1,4.7,4.9,5,5.2,5.3,5.4,5.5),
  x4 = c(8.5,8.2,8.4,8.5,8.6,8.7,8.8,8.9,8.7,8.8,8.9,9),
  x5 = c(20000,22000,25000,23000,30000,28000,27000,35000,40000,45000,50000,60000),
  y = c(120,150,160,165,180,170,190,210,230,250,300,350)
)


# Build the linear regression model
model <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = data)

#Asumsi
library(car)
#Autokorelasi
autotest <- durbinWatsonTest(model) 
#Multikolinieritas
multicol <- vif(model)

# Uji Heteroskedastisitas
het <- ncvTest(model) 

# Uji Normalitas
normal <- shapiro.test(resid(model))

# Define UI
ui <- dashboardPage(
  dashboardHeader(title = "Sales Prediction"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Statistika Deskriptif", tabName = "estimasi"),
      menuItem("Hubungan Variabel", tabName = "relation"),
      menuItem("Prediksi", tabName = "prediksi"),
      menuItem("Uji Asumsi", tabName = "asumsi")
    )
  ),
  dashboardBody(
    tabItems(
      tabItem(tabName = "estimasi",
              verbatimTextOutput("model_lm")
      ),
      tabItem(tabName = "relation",
              fluidPage(
                titlePanel(title = div("Hubungan Tiap Variabel", style = "color: #333333; font-size: 40px; font-weight: bold; text-align: center; height: 120px")),
                sidebarLayout(
                  sidebarPanel(
                    selectInput("variable", "Select Variable:", choices = colnames(data)),
                    actionButton("plot", "Generate Plot", class = "btn-primary")
                  ),
                  mainPanel(
                    plotOutput("scatter_boxplot", height = "800px")
                  )
                )
              )
      ),
      
      tabItem(tabName = "prediksi",
              fluidPage(
                titlePanel(title = div("Prediksi Volume Sales Bulanan", style = "color: #333333; font-size: 40px; font-weight: bold; text-align: center; height: 120px")),
                sidebarLayout(
                  sidebarPanel(
                    numericInput("x1", "Number of Website Visitors per Month:", value = 0),
                    numericInput("x2", "Number of Monthly Transactions:", value = 0),
                    numericInput("x3", "Average Number of Items per Transaction:", value = 0),
                    numericInput("x4", "Customer Satisfaction Rating:", value = 0),
                    numericInput("x5", "Number of Online Advertisements Run per Month:", value = 0),
                    actionButton("analyze_button", "Analyze Sales", class = "btn-primary")
                  ),
                  mainPanel(
                    plotOutput("sales_plot"),
                    verbatimTextOutput("analysis_output")
                  )
                )
              )
      ),
      tabItem(tabName = "asumsi",
              box(title = "Uji Asumsi", width = NULL, solidHeader = TRUE,
                  h4("Autokorelasi"),
                  verbatimTextOutput("autotest"),
                  
                  h4("Multikolinearitas"),
                  tableOutput("multicol"),
                  
                  h4("Heteroskedastisitas"),
                  verbatimTextOutput("hetero"),
                  
                  h4("Normalitas"),
                  verbatimTextOutput("normal")
              )
      )
    )
  )
)

# Define server
server <- function(input, output, session) {
  
  output$model_lm <- renderPrint({
    summary(model)
  })
  
  # Variable Relationship
  observeEvent(input$plot, {
    variable <- input$variable
    
    output$scatter_boxplot <- renderPlot({
      
      scatter_plot <- ggplot(data, aes_string(x = variable, y = "y")) +
        geom_point(color = "lightblue", size = 3) +
        geom_smooth(method = "lm", se = FALSE, color = "yellow") +
        labs(x = variable, y = "y", title = paste("Scatter Plot of", variable, "vs. y")) +
        theme_minimal() +
        theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5, color = "black"),
              axis.title = element_text(size = 14),
              axis.text = element_text(size = 12),
              legend.position = "none")
      
      box_plot <- ggplot(data, aes_string(x = "y", y = variable)) +
        geom_boxplot(fill = "lightblue") +
        labs(x = "y", y = variable, title = paste("Boxplot of", variable)) +
        theme_minimal() +
        theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5, color = "black"),
              axis.title = element_text(size = 14),
              axis.text = element_text(size = 12))
      
      grid.arrange(scatter_plot, box_plot, nrow = 2)
      
    })
  })
  
  # Prediksi
  predicted_sales <- reactive({
    new_data <- data.frame(x1 =input$x1, 
                           x2 =input$x2, 
                           x3 =input$x3,
                           x4 =input$x4,
                           x5 =input$x5
    )
    predict(model, newdata = new_data)
  })
  
  output$sales_plot <- renderPlot({
    # Scatterplot
    plot(data$x1, data$y, col = "blue", xlab = "Number of Website Visitors", ylab = "Monthly Sales Volume (dalam ribuan USD)", main = "Scatterplot Prediction Volume Sales", xlim = c(120000, 300000), ylim = c(0, 500))
    points(input$x1, predicted_sales(), col = "red", pch = 16)
    legend("topright", legend = c("Actual Data", "Predicted Data"), col = c("blue", "red"), pch = c(1, 16))
  })
  
  output$analysis_output <- renderPrint({
    cat("Prediction Volume Sales: ", predicted_sales(), " (in thousands of USD)\n")
    
    # Displaying regression coefficients
    coefficients <- coef(model)
    
    cat("\nRegression Coefficients:\n")
    for (i in seq_along(coefficients)) {
      cat(names(coefficients)[i], ": ", coefficients[i], "\n")
    }
  })
  output$autotest <- renderPrint({
    print(autotest)
  })
  
  output$multicol <- renderTable({
    multicol
  })
  
  output$hetero <- renderPrint({
    print(het)
  })
  
  output$normal <- renderPrint({
    print(normal)
  })
}
# Identifying the variable with the highest positive coefficient
# Jalankan aplikasi
shinyApp(ui = ui, server = server)
